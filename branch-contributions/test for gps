// Include necessary libraries
#include <SPI.h>
#include <LoRa.h>
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME680.h>
#include <Adafruit_GPS.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// LoRa pin configuration
const int LORA_CS = 9;
const int LORA_RST = 13;
const int LORA_IRQ = 14;

// Manually define SPI1 pins
#define LORA_SCK 10
#define LORA_MISO 12
#define LORA_MOSI 11

// Create sensor instances
Adafruit_BME680 bme;
Adafruit_GPS GPS(&Wire); // I2C GPS

// Timing variables
unsigned long previousMillis = 0;
const unsigned long interval = 5000; // 5-second interval
byte msgCount = 0;

void setup() {
    Serial.begin(9600);
    while (!Serial);
    Serial.println("Initializing CANSAT...");

    // === LORA INIT ===
    Serial.println("Starting LoRa...");
    SPI1.setSCK(LORA_SCK);
    SPI1.setTX(LORA_MOSI);
    SPI1.setRX(LORA_MISO);
    LoRa.setSPI(SPI1);
    LoRa.setPins(LORA_CS, LORA_RST, LORA_IRQ);

    if (!LoRa.begin(919E6)) {
        Serial.println("LoRa Failed!");
        while (1);
    }
    Serial.println("LoRa initialized!");

    // === BME680 INIT ===
    Serial.println("Starting BME680...");
    if (!bme.begin()) {
        Serial.println("BME680 Failed!");
        while (1);
    }
    bme.setTemperatureOversampling(BME680_OS_8X);
    bme.setHumidityOversampling(BME680_OS_2X);
    bme.setPressureOversampling(BME680_OS_4X);
    bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
    bme.setGasHeater(320, 150);
    Serial.println("BME680 initialized");

    // === GPS INIT ===
    Serial.println("Starting GPS...");
    if (!GPS.begin(0x10)) {
        Serial.println("GPS not detected!");
        while (1);
    }

    GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
    GPS.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ);
    delay(1000);

    // === GPS FIX WAIT ===
    Serial.println("Waiting for GPS fix (up to 1 min)...");
    unsigned long startTime = millis();
    while (millis() - startTime < 60000) {
        GPS.read();
        if (GPS.newNMEAreceived()) {
            GPS.parse(GPS.lastNMEA());
        }
        if (GPS.fix) {
            Serial.print("Fix acquired! Sats: ");
            Serial.println((int)GPS.satellites);
            break;
        }
        delay(1000);
    }

    if (!GPS.fix) {
        Serial.println("No GPS fix. Proceeding anyway...");
    }

    delay(1000);
}

void loop() {
    unsigned long currentMillis = millis();

    if (currentMillis - previousMillis >= interval) {
        previousMillis = currentMillis;

        // === BME680 Reading ===
        if (!bme.performReading()) {
            Serial.println("BME680 reading failed!");
            return;
        }

        // === GPS Reading ===
        GPS.read();
        if (GPS.newNMEAreceived()) {
            GPS.parse(GPS.lastNMEA());
        }

        // === Format data ===
        String data = "Temp: " + String(bme.temperature, 2) + "Â°C\n";
        data += "Pressure: " + String(bme.pressure / 100.0, 2) + " hPa\n";
        data += "Humidity: " + String(bme.humidity, 2) + "%\n";

        if (GPS.fix) {
            data += "Lat: " + String(GPS.latitudeDegrees, 6) + "\n";
            data += "Lon: " + String(GPS.longitudeDegrees, 6) + "\n";
            data += "GPS Alt: " + String(GPS.altitude, 2) + " m\n";
            data += "Sats: " + String((int)GPS.satellites);
        } else {
            data += "Lat: N/A\nLon: N/A\nGPS Alt: N/A\nSats: 0";
        }

        // === Print and Send ===
        Serial.println(data);
        Serial.print("Sending LoRa packet: ");
        Serial.println(msgCount);

        LoRa.beginPacket();
        LoRa.print("Packet " + String(msgCount) + " | ");
        LoRa.print(data);
        LoRa.endPacket();

        msgCount++;
    }
}
