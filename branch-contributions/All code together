

// Include necessary libraries

#include <SPI.h>

#include <LoRa.h>

#include <Wire.h>

#include <Adafruit_Sensor.h>

#include <Adafruit_BME680.h>

#include <Adafruit_GPS.h>

// LoRa pin configuration

const int LORA_CS = 9;

const int LORA_RST = 13;

const int LORA_IRQ = 14;

// Manually define SPI1 pins

#define LORA_SCK 10

#define LORA_MISO 12

#define LORA_MOSI 11

// Create sensor instances

Adafruit_BME680 bme;

#define GPSSerial Wire

Adafruit_GPS GPS(&GPSSerial);

// Timing variables

unsigned long timeOfTest = 0;

unsigned long previousMillis = 0;

const unsigned long interval = 1000; // 1-second interval

byte msgCount = 0;

void setup() {

Serial.begin(9600);

Serial.print("Starting Serial...");

while (!Serial);



// Initialize LoRa

Serial.println("Starting LoRa...");

SPI1.setSCK(LORA_SCK);

SPI1.setTX(LORA_MOSI);

SPI1.setRX(LORA_MISO);

LoRa.setSPI(SPI1);

LoRa.setPins(LORA_CS, LORA_RST, LORA_IRQ);



if (!LoRa.begin(915E6)) { 

    Serial.println("LoRa initialization failed!");

    while (1);

}

Serial.println("LoRa initialized!");



// Initialize BME680

if (!bme.begin()) {

    Serial.println("BME680 sensor not found!");

    while (1);

}

bme.setTemperatureOversampling(BME680_OS_8X);

bme.setHumidityOversampling(BME680_OS_2X);

bme.setPressureOversampling(BME680_OS_4X);

bme.setIIRFilterSize(BME680_FILTER_SIZE_3);

bme.setGasHeater(320, 150);



// Initialize GPS

GPS.begin(0x10);

delay(100);

GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);

delay(100);

GPS.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ);

delay(1000);



Serial.println("GPS ready...");

}

void loop() {

unsigned long currentMillis = millis();



if (currentMillis - previousMillis >= interval) {

    previousMillis = currentMillis;

    timeOfTest++;



    int hours = timeOfTest / 3600;

    int minutes = (timeOfTest % 3600) / 60;

    int seconds = timeOfTest % 60;



    // Read sensor data

    if (!bme.performReading()) {

        Serial.println("BME680 reading failed!");

        return;

    }



    // Read GPS data

    GPS.read();

    if (GPS.newNMEAreceived()) {

        if (!GPS.parse(GPS.lastNMEA())) return;

    }



    // Format data

    String data = "Time: " + String(hours) + "h " + String(minutes) + "m " + String(seconds) + "s | ";

    data += "Temp: " + String(bme.temperature, 2) + "Â°C | ";

    data += "Pressure: " + String(bme.pressure / 100.0, 2) + " hPa | ";

    data += "Humidity: " + String(bme.humidity, 2) + "% | ";

    data += "Lat: " + String(GPS.latitude, 4) + " | ";

    data += "Lon: " + String(GPS.longitude, 4) + " | ";

    data += "Alt: " + String(GPS.altitude) + "m | ";

    data += "Sats: " + String((int)GPS.satellites);



    Serial.println(data); // Print to Serial Monitor



    // Send LoRa packet

    Serial.print("Sending LoRa packet: ");

    Serial.println(msgCount);

    LoRa.beginPacket();

    LoRa.print("Packet " + String(msgCount) + " | ");

    LoRa.print(data);

    LoRa.endPacket();



    msgCount++;

}

}

