// Include necessary libraries
#include <SPI.h>
#include <LoRa.h>
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME680.h>
#include <Adafruit_GPS.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// LoRa pin configuration
const int LORA_CS = 9;
const int LORA_RST = 13;
const int LORA_IRQ = 14;

// Manually define SPI1 pins
#define LORA_SCK 10
#define LORA_MISO 12
#define LORA_MOSI 11

// OLED display setup
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

// Create sensor instances
Adafruit_BME680 bme;
#define GPSSerial Wire
Adafruit_GPS GPS(&GPSSerial);

// Timing variables
unsigned long previousMillis = 0;
const unsigned long interval = 5000; // 5-second interval
byte msgCount = 0;

void setup() {
    Serial.begin(9600);
    while (!Serial);
    Serial.println("Initilizing CANSAT");

    // === OLED INIT ===
    Serial.println("Before OLED");
    if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
        Serial.println("SSD1306 OLED failed!");
        while (1);
    }
    Serial.println("After OLED");
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(0, 0);
    display.println("OLED Display Check");
    display.display();
    delay(2000);
    display.clearDisplay();

    // === LORA INIT ===
    display.setCursor(0, 0);
    display.println("Starting Lora...");
    display.display();

    SPI1.setSCK(LORA_SCK);
    SPI1.setTX(LORA_MOSI);
    SPI1.setRX(LORA_MISO);
    LoRa.setSPI(SPI1);
    LoRa.setPins(LORA_CS, LORA_RST, LORA_IRQ);

    if (!LoRa.begin(919E6)) { 
        display.println("LoRa Failed!");
        display.display();
        while (1);
    }
    Serial.println("LoRa initialized!");
    display.println("LoRa Intialized");
    display.display();
    delay(500);

    // === BME680 INIT ===
    display.println("Starting BME680: ...");
    display.display();
    if (!bme.begin()) {
        display.println("BME680 Failed!");
        display.display();
        while (1);
    }
    bme.setTemperatureOversampling(BME680_OS_8X);
    bme.setHumidityOversampling(BME680_OS_2X);
    bme.setPressureOversampling(BME680_OS_4X);
    bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
    bme.setGasHeater(320, 150);

    display.println("BME680 initialized");
    display.display();
    delay(2000);

    // === GPS INIT ===
    display.println("Starting GPS...");
    display.display();

    GPS.begin(0x10);
    delay(100);
    GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
    delay(100);
    GPS.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ);
    delay(1000);

    // === GPS FIX CHECK ===
    display.println("Acquiring GPS...");
    display.display();
    Serial.println("Waiting for GPS fix (1 min max)...");
    unsigned long startTime = millis();

    while (millis() - startTime < 60000) {  // 1 min timeout
        GPS.read();
        if (GPS.newNMEAreceived()) {
            Serial.println(GPS.lastNMEA()); 
            if (GPS.parse(GPS.lastNMEA())) {
                Serial.print("Satellites: ");
                Serial.println((int)GPS.satellites);

                if (GPS.satellites > 0) {
                    display.println("GPS fix acquired");
                    display.display();
                    delay(500);
                    break;
                }
            }
        }
        delay(1000);
    }

    if (GPS.satellites == 0) {
        display.println("GPS fix timeout... Proceeding anyways");
        display.display();
        delay(500);
    }
}

void loop() {
    unsigned long currentMillis = millis();

    if (currentMillis - previousMillis >= interval) {
        previousMillis = currentMillis;

        // Read sensor data
        if (!bme.performReading()) {
            Serial.println("BME680 reading failed!");
            return;
        }

        // Read GPS data
        GPS.read();
        if (GPS.newNMEAreceived()) {
            if (!GPS.parse(GPS.lastNMEA())) return;
        }

        // Format data
        String data = "Temp: " + String(bme.temperature, 2) + "Â°C\n";
        data += "Pressure: " + String(bme.pressure / 100.0, 2) + " hPa\n";
        data += "Humidity: " + String(bme.humidity, 2) + "%\n";
        data += "Lat: " + (GPS.satellites > 0 ? String(GPS.latitude, 4) : "N/A") + "\n";
        data += "Lon: " + (GPS.satellites > 0 ? String(GPS.longitude, 4) : "N/A") + "\n";
        data += "Alt: " + (GPS.satellites > 0 ? String(GPS.altitude) : "N/A") + "m\n";
        data += "Sats: " + String((int)GPS.satellites);

        Serial.println(data);

        // Update OLED Display
        display.clearDisplay();
        display.setCursor(0, 0);
        display.println("LoRa Packet: " + String(msgCount));
        display.println("------------");
        display.println(data);
        display.display();

        // Send LoRa packet
        Serial.print("Sending LoRa packet: ");
        Serial.println(msgCount);
        LoRa.beginPacket();
        LoRa.print("Packet " + String(msgCount) + " | ");
        LoRa.print(data);
        LoRa.endPacket();

        msgCount++;
    }
    delay(interval);
}
