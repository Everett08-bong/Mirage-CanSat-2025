#include <SPI.h>
#include <LoRa.h>
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME680.h>
#include <Adafruit_GPS.h>

// === LoRa Configuration ===//
const int LORA_CS = 9;
const int LORA_RST = 13;
const int LORA_IRQ = 14;
#define LORA_SCK 10
#define LORA_MISO 12
#define LORA_MOSI 11

// === Sensor Instances ===//
Adafruit_BME680 bme;
Adafruit_GPS GPS(&Wire); // GPS over I2C

// === Timing ===
unsigned long previousMillis = 0;
const unsigned long interval = 5000;
uint32_t gpsTimer = millis();
byte msgCount = 0;

void setup() {
  Serial.begin(115200);

  Serial.println("Initializing CANSAT...");

  // === LORA INIT ===
  SPI1.setSCK(LORA_SCK);
  SPI1.setTX(LORA_MOSI);
  SPI1.setRX(LORA_MISO);

  LoRa.setSPI(SPI1);
  LoRa.setPins(LORA_CS, LORA_RST, LORA_IRQ);

  if (!LoRa.begin(919E6)) {
    Serial.println("LoRa Failed!");
    while (1);
  }
  Serial.println("LoRa initialized!");

  //=== BME680 INIT ===//
  Serial.println("Starting BME680...");
  if (!bme.begin()) {
    Serial.println("BME680 Failed!");
    while (1);
  }
  bme.setTemperatureOversampling(BME680_OS_8X);
  bme.setHumidityOversampling(BME680_OS_2X);
  bme.setPressureOversampling(BME680_OS_4X);
  bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
  bme.setGasHeater(320, 150);
  Serial.println("BME680 initialized!");

  //=== GPS INIT ===//
  Serial.println("Starting GPS over I2C...");
  if (!GPS.begin(0x10)) {
    Serial.println("GPS not responding at 0x10");
    while (1);
  }
  GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
  delay(100);
  GPS.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ);
  delay(100);
  GPS.sendCommand(PGCMD_ANTENNA);
  delay(100);
  Serial.println("GPS initialized!");

  delay(2000);
}

void loop() {
  GPS.read();

  if (GPS.newNMEAreceived()) {
    char *sentence = GPS.lastNMEA();
    if (!GPS.parse(sentence)) return;
  }

  unsigned long currentMillis = millis();

  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;

    //Read BME680 data
    if (!bme.performReading()) {
      Serial.println("BME680 reading failed!");
      return;
    }

    float temperature = bme.temperature;
    float pressure = bme.pressure / 100.0;
    float humidity = bme.humidity;

    //GPS Data
    int fix = GPS.fix;
    int sats = GPS.satellites;
    float lat = GPS.latitude;
    float lon = GPS.longitude;
    float gpsAlt = GPS.altitude;

    //Format string
    String payload = "T:" + String(temperature, 2) + ", ";
    payload += "P:" + String(pressure, 2) + ", ";
    payload += "H:" + String(humidity, 2) + ", ";
    payload += "Fix:" + String(fix) + ", ";
    payload += "Sat:" + String(sats) + ", ";
    payload += "Lat:" + String(lat, 4) + ", ";
    payload += "Lon:" + String(lon, 4) + ", ";
    payload += "Alt:" + String(gpsAlt, 1);

    // Serial print
    Serial.println("------ Telemetry ------");
    Serial.println(payload);

    // Send LoRa
    LoRa.beginPacket();
    LoRa.print(String(msgCount) + " | " + payload);
    LoRa.endPacket();

    msgCount++;
  }
  delay(50);
}
