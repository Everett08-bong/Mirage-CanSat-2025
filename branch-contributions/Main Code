#include <Wire.h>                  // I2C communication library
#include <Adafruit_Sensor.h>        // Sensor base library
#include <Adafruit_BME680.h>        // BME680 library
#include <Adafruit_GPS.h>

// Create an instance of the BME680 with default I2C address (0x76 or 0x77)
Adafruit_BME680 bme;

#define GPSSerial Wire
Adafruit_GPS GPS(&GPSSerial);

unsigned long timeOfTest = 0; // Initialize time in seconds
unsigned long previousMillis = 0; // Stores the last time update
const unsigned long interval = 1000; // Interval for 1 second

  void setup() {
   Serial.begin(9600);               // Start serial communication

   // Initialize the BME680 sensor
   if (!bme.begin()) {
     Serial.println("Could not find a valid BME680 sensor, check wiring!");
     while (1);                      // Stop execution if the sensor is not found
   }

   // Sensor configuration (oversampling, IIR filter, gas heater)
   bme.setTemperatureOversampling(BME680_OS_8X);
   bme.setHumidityOversampling(BME680_OS_2X);
   bme.setPressureOversampling(BME680_OS_4X);
   bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
   bme.setGasHeater(320, 150);       // 320°C for 150 ms

    GPS.begin(0x10);  // Set the I2C address for PA1010D
    delay(100);
    GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
    delay(100);
    GPS.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ);
    delay(1000);

    Serial.println("GPS ready to receive data...");
 }

void loop() {
  unsigned long currentMillis = millis();

  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis; // Save the last time update
    timeOfTest++; // Increment time by 1 second

    // Convert timeOfTest to hours, minutes, seconds
    int hours = timeOfTest / 3600; // 3600 seconds in an hour
    int minutes = (timeOfTest % 3600) / 60; // 60 seconds in a minute
    int seconds = timeOfTest % 60; // Remaining seconds

    // Perform a reading
    if (!bme.performReading()) {
      Serial.println("Failed to perform reading :(");
      return;
    }

    // Output the time and sensor readings in one line
    Serial.printf("Time: %dh %dm %ds | Temperature: %.2f °C | Pressure: %.2f hPa | Humidity: %.2f %% | \n", 
                  hours, minutes, seconds, 
                  bme.temperature, bme.pressure / 100.0, bme.humidity);
  }
  GPS.read();
  if (GPS.newNMEAreceived()) {
    if (!GPS.parse(GPS.lastNMEA())) {
      return;
    }

    // Print GPS data
    Serial.print("Latitude: "); Serial.println(GPS.latitude, 4);
    Serial.print("Longitude: "); Serial.println(GPS.longitude, 4);
    Serial.print("Satellites: "); Serial.println((int)GPS.satellites);
    Serial.print("Altitude: "); Serial.println(GPS.altitude);
    Serial.println("--------------------");
  }

  delay(interval);  // Wait for 1 second before the next reading
}
