// Include necessary libraries
#include <SPI.h>
#include <LoRa.h>
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME680.h>
#include <Adafruit_GPS.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// LoRa pin configuration
const int LORA_CS = 9;
const int LORA_RST = 13;
const int LORA_IRQ = 14;

// Manually define SPI1 pins
#define LORA_SCK 10
#define LORA_MISO 12
#define LORA_MOSI 11

//define sea-level pressure
#define SEALEVELPRESSURE_HPA (1023) //Surrey, BC

// Create sensor instances
Adafruit_BME680 bme;

// Timing variables
unsigned long previousMillis = 0;
const unsigned long interval = 5000; // 5-second interval
byte msgCount = 0;

void setup() {
    Serial.begin(9600);
    Serial.println("Initializing CANSAT");

    // === LORA INIT === //

    SPI1.setSCK(LORA_SCK);
    SPI1.setTX(LORA_MOSI);
    SPI1.setRX(LORA_MISO);
    LoRa.setSPI(SPI1);
    LoRa.setPins(LORA_CS, LORA_RST, LORA_IRQ);

    if (!LoRa.begin(919E6)) { 
        Serial.println("LoRa Failed!");
        while (1);
    }
    Serial.println("LoRa initialized!");
    delay(500);

    // === BME680 INIT ===
    Serial.println("Starting BME680: ...");
    if (!bme.begin()) {
        Serial.println("BME680 Failed!");
        while (1);
    }
    bme.setTemperatureOversampling(BME680_OS_8X);
    bme.setHumidityOversampling(BME680_OS_2X);
    bme.setPressureOversampling(BME680_OS_4X);
    bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
    bme.setGasHeater(320, 150);

    Serial.println("BME680 initialized");
    delay(2000);
}

void loop() {
    unsigned long currentMillis = millis();

    if (currentMillis - previousMillis >= interval) {
        previousMillis = currentMillis;

        // Read sensor data
        if (!bme.performReading()) {
            Serial.println("BME680 reading failed!");
            return;
        }

        // Format data
        float temperature = bme.temperature;
        float pressure_hPa = bme.pressure / 100.0;
        float humidity = bme.humidity;
        float altitude = bme.readAltitude(SEALEVELPRESSURE_HPA);

        String data = "T: " + String(temperature, 2) + "Â°C, ";
        data += "P: " + String(pressure_hPa, 2) + " hPa, ";
        data += "Hum: " + String(humidity, 2) + "%, ";
        data += "Alt: " + String(altitude, 2) + " m";

        Serial.println(data);

        // Send LoRa packet
        Serial.println("Sent LoRa Packet: " + String(msgCount));
        LoRa.beginPacket();
        LoRa.print("Packet " + String(msgCount) + " | ");
        LoRa.print(data);
        LoRa.endPacket();

        msgCount++;
    }
    delay(interval);
}
